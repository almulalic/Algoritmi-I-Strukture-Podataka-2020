==1384== Memcheck, a memory error detector
==1384== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==1384== Using Valgrind-3.13.0 and LibVEX; rerun with -h for copyright info
==1384== Command: /rhome/a/amulalic1/workspace/ASP/PZ7/Z1/.runme
==1384== Parent PID: 1368
==1384== 
==1384== Invalid read of size 8
==1384==    at 0x5162FA0: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::size() const (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.25)
==1384==    by 0x109651: __gnu_cxx::__enable_if<std::__is_char<char>::__value, bool>::__type std::operator==<char>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) (basic_string.h:6019)
==1384==    by 0x109588: NizMapa<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >::operator[](std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) (main.cpp:87)
==1384==    by 0x1091B0: main (main.cpp:133)
==1384==  Address 0x8 is not stack'd, malloc'd or (recently) free'd
==1384== 
==1384== 
==1384== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==1384==  Access not within mapped region at address 0x8
==1384==    at 0x5162FA0: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::size() const (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.25)
==1384==    by 0x109651: __gnu_cxx::__enable_if<std::__is_char<char>::__value, bool>::__type std::operator==<char>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) (basic_string.h:6019)
==1384==    by 0x109588: NizMapa<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >::operator[](std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) (main.cpp:87)
==1384==    by 0x1091B0: main (main.cpp:133)
==1384==  If you believe this happened as a result of a stack
==1384==  overflow in your program's main thread (unlikely but
==1384==  possible), you can try to increase the size of the
==1384==  main thread stack using the --main-stacksize= flag.
==1384==  The main thread stack size used in this run was 8388608.
==1384== 
==1384== HEAP SUMMARY:
==1384==     in use at exit: 408 bytes in 2 blocks
==1384==   total heap usage: 3 allocs, 1 frees, 73,112 bytes allocated
==1384== 
==1384== LEAK SUMMARY:
==1384==    definitely lost: 0 bytes in 0 blocks
==1384==    indirectly lost: 0 bytes in 0 blocks
==1384==      possibly lost: 0 bytes in 0 blocks
==1384==    still reachable: 408 bytes in 2 blocks
==1384==         suppressed: 0 bytes in 0 blocks
==1384== Reachable blocks (those to which a pointer was found) are not shown.
==1384== To see them, rerun with: --leak-check=full --show-leak-kinds=all
==1384== 
==1384== For counts of detected and suppressed errors, rerun with: -v
==1384== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)
